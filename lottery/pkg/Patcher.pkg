$#include "owl/XPatcher.h"
enum 
{
	PS_UNKONW,
	PS_NDS_ERROR,// dns reslove failed
	PS_LOCAL_ASSET_BROKEN,
	PS_ASSET_BROKEN,// asset broke
	PS_NETWORK_EXCEPTION,
	PS_APPVER_ERROR,// application error
	PS_CHECK_NETOWRK,
	PS_CHECK_VERSION,
	PS_DOWNLOAD_PATCH,
	PS_APPLY_PATCH,
	PS_FINISH,
};

struct AssetVersion 
{
	int main_version;
	int sub_version;
	int asset_version;
};

struct PatcherEvent
{
	int event_type;
	int parm1;
	int parm2;
	int parm3;
};

struct PatcherState 
{
	AssetVersion cur_version; //current version
	AssetVersion target_version;// target version
	int state;//current status
	bool is_complete;// is complete not use
	int total_length;// downloading currrent file total length
	int getted_length;// dowloaded current file currrent length
	int cur_index;// download current file index
	int total_count; // total need download file
	float real_speed;// current download speed
	int apply_index; // current patch apply current index
	int total_apply; // total patch need to be applied
};

class XPatcher
{
public:
	XPatcher();
	~XPatcher();

	static XPatcher& GetInstance();
	bool Init(const char* writable_path, const char* bundle_path);

	void TrigEvent(const PatcherEvent& pe);

	void StartPatch(const char* patch_url);//传入更新服务器地址
	PatcherState QueryPatcherState();

	void DownloadFile(const char* url, const char* dest_file);
	void DownloadFile(const char* url, const char* dest_file, pfnDownloadCallback func);
	void UploadFile(const char* src_file, const char* url, pfnUploadCallback func);
	
	void PatchProc();
	void DownloadPathCallBack(void* data, int downloaded, int total, int speed);
	void ApplyPatchCallBack(int cur_apply, int total_apply);
	void Clean();
};